- All code runs normally in a single thread called main tread
- UI executes on the main thread as it's a little bit heavy and need the main power of the hardware
- Coroutines is similar to threads
- Coroutines runs inside a thread and suspendable and can switch the context
- Coroutine should run inside of a scope like GlobalScope
- GlogalScope means that this coroutine will live as long the application does
- If coroutine finishes it's job it will be destroyed automatically
- Delay is a function to pause the work of the coroutine but not blocking the while thread, yet the sleep in threads will stop the whole thread
- If the main thread ends someway like we ended the application or something so the coroutines will be destroyed as the main thread of the app got destroyed
- Suspend functions can only be executed inside another suspend function or inside of a coroutine weather these functions are predefined like delay() or just customer created like i have created a suspend function for my use
- We can run coroutines in different threads and also can create our own thread
- Main is mainly used for UI execution and IO is mainly for network / database operations ...
- Can switch between threads by using withContext() function
- runBlocking is running a coroutine in the main thread and totally block the thread
- Again runBlocking is blocking the main thread until we finish working with the other code inside it
- Can run other coroutines inside runBlocking block
- Coroutines returns a job that can be saved in a variable then we can execute it or just wait for it by using the function variable.join()
- variable.cancel() is used to cancel the job with and exception if i wanted to
- withTimeout() gives us the ability to set a time out or time frame for the coroutine
- isActive checks if the coroutine is still running or been cancelled or paused








